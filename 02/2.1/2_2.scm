(define (make-segment n m) (cons n m))
(define (start-segment s) (car s))
(define (end-segment s) (cdr s))
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (midpoint-segment s)
  (let ((x1 (x-point (start-segment s)))
        (x2 (x-point (end-segment s)))
        (y1 (y-point (start-segment s)))
        (y2 (y-point (end-segment s))))
    (make-point (+ (smaller x1 x2) (size x1 x2))
                (+ (smaller y1 y2) (size y1 y2)))))

(define (smaller x y)
  (if (> x y)
      y
      x))
(define (size x y)
  (/ (abs (- x y)) 2))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")" ))

(define n1 (make-point -1 1))
(define n2 (make-point 1 -1))
(define s (make-segment n1 n2))
(define mid (midpoint-segment s))
(print-point mid)