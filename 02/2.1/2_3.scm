(define (make-segment n m) (cons n m))
(define (start-segment s) (car s))
(define (end-segment s) (cdr s))
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (midpoint-segment s)
  (let ((x1 (x-point (start-segment s)))
        (x2 (x-point (end-segment s)))
        (y1 (y-point (start-segment s)))
        (y2 (y-point (end-segment s))))
    (make-point (+ (smaller x1 x2) (size x1 x2))
                (+ (smaller y1 y2) (size y1 y2)))))

(define (smaller x y)
  (if (> x y)
      y
      x))
(define (size x y)
  (/ (abs (- x y)) 2))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")" ))

(define n1 (make-point -1 1))
(define n2 (make-point 1 -1))
(define s (make-segment n1 n2))
(define mid (midpoint-segment s))
(print-point mid)


(define (cmp p1 p2)
	(if (and (= (x-point p1) (x-point p2))
			 		 (= (y-point p1) (y-point p2)))
			1
			0))

(define (check-cmp w h)
	(let ((a1 (start-segment w))
				(a2 (end-segment w))
				(a3 (start-segment h))
				(a4 (end-segment h)))
		(+ (cmp a1 a3)
			 (cmp a1 a4)
			 (cmp a2 a3)
			 (cmp a2 a4))))

(define (distance-point p1 p2)
	(define square (lambda (x) (* x x)))
	(let ((x1 (x-point p1))
				(y1 (y-point p1))
				(x2 (x-point p2))
				(y2 (y-point p2)))
		(sqrt (+ (square (- x2 x1)) (square (- y2 y1))))))

(define (check-diagonal w h)
	(define (eval a b c)
		(let ((half-diagonal (/ (distance-point b c) 2))
					(midpoint (midpoint-segment (make-segment b c))))
			(= (distance-point a midpoint) half-diagonal)))
	(let ((a1 (start-segment w))
				(a2 (end-segment w))
				(a3 (start-segment h))
				(a4 (end-segment h)))
		(cond ((= (cmp a1 a3) 1) (eval a1 a2 a4))
					((= (cmp a1 a4) 1) (eval a1 a2 a3))
					((= (cmp a2 a3) 1) (eval a2 a1 a4))
					((= (cmp a2 a4) 1) (eval a2 a1 a3)))))

(define (slope-segment s)
	(let ((x1 (x-point (start-segment s)))
				(x2 (x-point (end-segment s)))
				(y1 (y-point (start-segment s)))
				(y2 (y-point (end-segment s))))
		(if (= (- x2 x1) 0)
			1
			(/ (- y2 y1) (- x2 x1)))))

(define (check-slope w h)
	(cond ((and (= (slope-segment w) 0) (= (slope-segment h) 1)) #t)
				((and (= (slope-segment w) 1) (= (slope-segment h) 0)) #t)
				((= (* (slope-segment w) (slope-segment h)) -1) #t)
				(else #f)))

(define (make-rectangle w h)
	(if (and (= (check-cmp w h) 1)
					 (check-slope w h))
		(cons w h)
		(error "can't make-rectangle\n")))

(define (width-rectangle r)
	(let ((p1 (car (car r)))
				(p2 (cdr (car r))))
		(distance-point p1 p2)))
(define (height-rectangle r)
	(let ((p1 (car (cdr r)))
				(p2 (cdr (cdr r))))
		(distance-point p1 p2)))

(define (area-rectangle r)
	(* (width-rectangle r) (height-rectangle r)))
(define (perimeter-rectangle r)
	(* 2 (+ (width-rectangle r) (height-rectangle r))))
	
(define w (make-segment (make-point 1 1) (make-point 4 1)))
(define h (make-segment (make-point 1 1) (make-point 1 0)))

(make-rectangle w h)
(define rectangle (make-rectangle w h))
(height-rectangle rectangle)
(area-rectangle rectangle)
(perimeter-rectangle rectangle)