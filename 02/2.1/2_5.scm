(define (fast-expt b n)
	(define (square x)
		(* x x))
	(define (even? x)
		(= (remainder x 2) 0))
	(define (fast-expt-iter b count result)
		(cond	((= count 0) result)
					((even? count) (fast-expt-iter (square b) (/ count 2) result))
					(else (fast-expt-iter b (- count 1) (* result b)))))
	(fast-expt-iter b n 1))

(define (cons x y)
	(* (fast-expt 2 x) (fast-expt 3 y)))

(define (car z)
	(define (car-iter val count)
		(if (= (remainder val 2) 0)
				(car-iter (/ val 2) (+ count 1))
				count))
	(car-iter z 0))

(define (cdr z)
	(define (cdr-iter val count)
		(if (= (remainder val 3) 0)
				(cdr-iter (/ val 3) (+ count 1))
				count))
	(cdr-iter z 0))